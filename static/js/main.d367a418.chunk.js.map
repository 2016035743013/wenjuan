{"version":3,"sources":["routes/routerMap.js","routes/router.js","container/index.js","serviceWorker.js","index.js"],"names":["path","component","lazy","name","isCache","CustomRouter","props","state","fallback","RouterMap","map","item","index","key","saveScrollPosition","exact","Component","Container","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIe,GACb,CAAEA,KAAM,IAAKC,UAHEC,gBAAK,kBAAM,uDAGQC,KAAM,OAAQC,SAAS,IC0D5CC,E,YAtDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXP,KAAM,IAHS,E,mHAuBjB,OAEE,kBAAC,aAAD,KACE,kBAAC,WAAD,CAAUQ,SAAU,+BAClB,kBAAC,cAAD,KACGC,EAAUC,KAAI,SAACC,EAAMC,GAAW,IAAD,EAC9B,OAAOD,EAAKP,QACV,kBAAC,KAAD,GACES,IAAKD,EACLE,oBAAoB,GAFtB,oBAGOF,GAHP,0BAIaD,EAAKV,WAJlB,+CAMQU,EAAKX,MANb,IASA,kBAAC,IAAD,CACEa,IAAKD,EACLX,UAAWU,EAAKV,UAChBc,OAAK,EACLf,KAAMW,EAAKX,iB,GA5CFgB,aCcZC,E,YAlBb,aAAe,IAAD,8BACZ,+CACKV,MAAQ,GAFD,E,mHAUZ,OACE,yBAAKW,UAAU,OACb,kBAAC,EAAD,W,GAbgBC,IAAMH,WCSVI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD4HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d367a418.chunk.js","sourcesContent":["import { lazy } from 'react';\n\nconst UserInfo = lazy(() => import('../page/userInfo'));\n\nexport default [\n  { path: '/', component: UserInfo, name: 'name', isCache: false },\n  // { path: '/mine', component: Mine, name: 'mine', isCache: false },\n  // {\n  //   path: '/bookdetail/:bookId',\n  //   component: BookDetail,\n  //   name: 'bookdetail',\n  //   isCache: false\n  // },\n  // { path: '/search', component: Search, name: 'search', isCache: true },\n  // { path: '/askbook', component: AskBook, name: 'askbook', isCache: false },\n  // {\n  //   path: '/historyrecords',\n  //   component: HistoryRecords,\n  //   name: 'historyrecords',\n  //   isCache: true\n  // },\n  // {\n  //   path: '/mycollect',\n  //   component: MyCollect,\n  //   name: 'mycollect',\n  //   isCache: true\n  // },\n  // { path: '/wish', component: Wish, name: 'wish', isCache: false },\n  // { path: '/unshelve', component: UnShelve, name: 'unshelve', isCache: false},\n  // { path: '/handbook', component: HandBook, name: 'handbook', isCache: false },\n  // { path: '/hint', component: Hint, name: 'hint', isCache: false }\n];\n","/* eslint-disable react/jsx-no-duplicate-props */\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport CacheRoute, { CacheSwitch } from \"react-router-cache-route\";\n\n// import { HashRouter, Link } from 'react-keeper'\nimport React, { Component, Suspense } from \"react\";\nimport RouterMap from \"./routerMap\";\n// import \"../static/css/router/router.css\";\nclass CustomRouter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      path: \"\"\n    };\n  }\n  componentDidMount() {\n    // 监听hash路由的变化\n    // window.addEventListener(\"hashchange\", event => {\n    //   this.setState({\n    //     path: event.newURL.slice(event.newURL.lastIndexOf(\"#\") + 1)\n    //   });\n    // });\n    // window.addEventListener(\"load\", event => {\n    //   this.setState({\n    //     path: event.path[0].location.href.slice(\n    //       event.path[0].location.href.lastIndexOf(\"#\") + 1\n    //     )\n    //   });\n    // });\n  }\n  render() {\n    let name = \"active\";\n    return (\n      // basename=\"/calendar\"\n      <HashRouter>\n        <Suspense fallback={<div></div>}>\n          <CacheSwitch>\n            {RouterMap.map((item, index) => {\n              return item.isCache ? (\n                <CacheRoute\n                  key={index}\n                  saveScrollPosition={true}\n                  key={index}\n                  component={item.component}\n                  exact\n                  path={item.path}\n                />\n              ) : (\n                <Route\n                  key={index}\n                  component={item.component}\n                  exact\n                  path={item.path}\n                />\n              );\n            })}\n          </CacheSwitch>\n        </Suspense>\n      </HashRouter>\n    );\n  }\n}\n\nexport default CustomRouter;\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport Router from '../routes/router.js';\r\nclass Container extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Container from './container';\nimport * as serviceWorker from './serviceWorker';\n// import 'antd/dist/antd.css';\nimport 'antd-mobile/dist/antd-mobile.css';\nReactDOM.render(<Container />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}